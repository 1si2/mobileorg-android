package com.matburt.mobileorg.Gui.Outline;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.matburt.mobileorg.R;
import com.matburt.mobileorg.Gui.Outline.Theme.DefaultTheme;
import com.matburt.mobileorg.OrgData.OrgFileParser;
import com.matburt.mobileorg.OrgData.OrgNode;
import com.matburt.mobileorg.OrgData.OrgProviderUtils;

import android.content.ContentResolver;
import android.content.Context;
import android.graphics.Color;
import android.graphics.Typeface;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.style.ForegroundColorSpan;
import android.text.style.StyleSpan;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.View;
import android.widget.Checkable;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class OutlineItem extends RelativeLayout implements Checkable {
		
	private TextView titleView;
	private TextView tagsView;
	
	public OutlineItem(Context context) {
		super(context);
		View.inflate(getContext(), R.layout.outline_item, this);
		titleView = (TextView) findViewById(R.id.outline_item_title);
		tagsView = (TextView) findViewById(R.id.outline_item_tags);
		titleView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
		tagsView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);
	}
	
	public void setup(OrgNode node, DefaultTheme theme, ContentResolver resolver) {
		String todo = node.todo;
		String name = node.name;
		String priority = node.priority;
		String tags = node.tags;
		
		SpannableStringBuilder itemText = new SpannableStringBuilder(name);
		
		if (name.startsWith("COMMENT"))
			itemText.setSpan(new ForegroundColorSpan(Color.GRAY), 0,
					"COMMENT".length(), 0);
		
		if (name.equals("Archive"))
			itemText.setSpan(new ForegroundColorSpan(Color.GRAY), 0,
					"Archive".length(), 0);
		
		 // Handles prefix generated by blockAgendas to indicate separator
		if(name.startsWith(OrgFileParser.BLOCK_SEPARATOR_PREFIX)) {
			itemText.delete(0, OrgFileParser.BLOCK_SEPARATOR_PREFIX.length());
			setBackgroundColor(Color.rgb(25, 25, 112));
			titleView.setGravity(Gravity.CENTER_VERTICAL
					| Gravity.CENTER_HORIZONTAL);
//			holder.orgItem.setTextSize();
		} else {
			//v.setBackgroundColor(NO_SELECTION);
			titleView.setGravity(Gravity.LEFT);
		}
		
		
		Pattern urlPattern = Pattern.compile("\\[\\[[^\\]]*\\]\\[([^\\]]*)\\]\\]");
		Matcher matcher = urlPattern.matcher(itemText);
		while(matcher.find()) {
			itemText.delete(matcher.start(), matcher.end());
			itemText.insert(matcher.start(), matcher.group(1));
		
			itemText.setSpan(new ForegroundColorSpan(Color.argb(255, 6, 69, 173)),
					matcher.start(), matcher.start() + matcher.group(1).length(), 0);	
			
			matcher = urlPattern.matcher(itemText);
		}
	
		if (priority != null && TextUtils.isEmpty(priority) == false) {
			Spannable prioritySpan = new SpannableString(priority + " ");
			prioritySpan.setSpan(new ForegroundColorSpan(Color.YELLOW), 0,
					priority.length(), 0);
			itemText.insert(0, prioritySpan);
		}
		
		
		itemText.setSpan(
				new ForegroundColorSpan(theme.levelColors[(int) Math
						.abs((node.level) % theme.levelColors.length)]), 0,
				itemText.length(), 0);
		
		
		if(TextUtils.isEmpty(todo) == false) {
			Spannable todoSpan = new SpannableString(todo + " ");
			
			boolean active = OrgProviderUtils.isTodoActive(todo, resolver);
			
			todoSpan.setSpan(new ForegroundColorSpan(active ? theme.c1Red : theme.caLGreen), 0,
					todo.length(), 0);
			itemText.insert(0, todoSpan);
		}
		
		for(int i = 0; i < node.level; i++)
			itemText.insert(0, "   ");
		
		itemText.setSpan(new StyleSpan(Typeface.NORMAL), 0, itemText.length(), 0);
		titleView.setText(itemText);
		
		if(tags != null && TextUtils.isEmpty(tags) == false) {
			tagsView.setTextColor(Color.GRAY);
			tagsView.setText(tags);
		} else
			tagsView.setVisibility(View.GONE);
	}

	@Override
	public boolean isChecked() {
		return false;
	}

	@Override
	public void setChecked(boolean checked) {
		if(checked)
			setBackgroundColor(Color.RED);
		else
			setBackgroundColor(Color.BLACK);
	}

	@Override
	public void toggle() {
	}

}
